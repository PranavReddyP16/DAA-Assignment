\hypertarget{Contour_8cpp}{}\doxysection{Contour.\+cpp File Reference}
\label{Contour_8cpp}\index{Contour.cpp@{Contour.cpp}}
{\ttfamily \#include $<$bits/stdc++.\+h$>$}\newline
{\ttfamily \#include $<$regex$>$}\newline
{\ttfamily \#include $<$streambuf$>$}\newline
Include dependency graph for Contour.\+cpp\+:
% FIG 0
\doxysubsection*{Classes}
\begin{DoxyCompactItemize}
\item 
class \mbox{\hyperlink{classPoint}{Point}}
\item 
struct \mbox{\hyperlink{structctree}{ctree}}
\item 
class \mbox{\hyperlink{classInterval}{Interval}}
\item 
class \mbox{\hyperlink{classLineSegment}{Line\+Segment}}
\item 
class \mbox{\hyperlink{classRectangle}{Rectangle}}
\item 
class \mbox{\hyperlink{classEdgeType}{Edge\+Type}}
\item 
class \mbox{\hyperlink{classEdge}{Edge}}
\item 
class \mbox{\hyperlink{classStripe}{Stripe}}
\item 
class \mbox{\hyperlink{classPartition}{Partition}}
\item 
struct \mbox{\hyperlink{structReturnSet}{Return\+Set}}
\end{DoxyCompactItemize}
\doxysubsection*{Macros}
\begin{DoxyCompactItemize}
\item 
\mbox{\Hypertarget{Contour_8cpp_a0acb682b8260ab1c60b918599864e2e5}\label{Contour_8cpp_a0acb682b8260ab1c60b918599864e2e5}} 
\#define {\bfseries T}~long long
\end{DoxyCompactItemize}
\doxysubsection*{Functions}
\begin{DoxyCompactItemize}
\item 
set$<$ \mbox{\hyperlink{classInterval}{Interval}} $>$ \mbox{\hyperlink{Contour_8cpp_a694ccc98dc701f61bf0b89164fbf7ccb}{interval\+Intersection}} (set$<$ \mbox{\hyperlink{classInterval}{Interval}} $>$ L1, set$<$ \mbox{\hyperlink{classInterval}{Interval}} $>$ R2)
\item 
set$<$ \mbox{\hyperlink{classStripe}{Stripe}} $>$ \mbox{\hyperlink{Contour_8cpp_ab9e88b9d504afff4dd5d036d42def5f6}{copy\+Function}} (set$<$ \mbox{\hyperlink{classStripe}{Stripe}} $>$ S, set$<$ T $>$ P, set$<$ T $>$ P1, \mbox{\hyperlink{classInterval}{Interval}} x\+\_\+int)
\item 
set$<$ \mbox{\hyperlink{classStripe}{Stripe}} $>$ \mbox{\hyperlink{Contour_8cpp_a7081468a9dbabf996cd604feaa4c537a}{blacken}} (set$<$ \mbox{\hyperlink{classStripe}{Stripe}} $>$ S, set$<$ \mbox{\hyperlink{classInterval}{Interval}} $>$ J)
\item 
set$<$ \mbox{\hyperlink{classStripe}{Stripe}} $>$ \mbox{\hyperlink{Contour_8cpp_aab15ea286786048f44dff97f975a4db8}{concat}} (set$<$ \mbox{\hyperlink{classStripe}{Stripe}} $>$ S1, set$<$ \mbox{\hyperlink{classStripe}{Stripe}} $>$ S2, set$<$ T $>$ P, \mbox{\hyperlink{classInterval}{Interval}} x\+\_\+int)
\item 
T \mbox{\hyperlink{Contour_8cpp_a350212d4e224cd81a4c689df94eb395d}{calculate\+Measure}} (set$<$ \mbox{\hyperlink{classStripe}{Stripe}} $>$ S)
\item 
struct \mbox{\hyperlink{structReturnSet}{Return\+Set}} \mbox{\hyperlink{Contour_8cpp_ac9d9cfa33b129ebfd7dae403ed646180}{compute\+Stripes}} (vector$<$ \mbox{\hyperlink{classEdge}{Edge}} $>$ vertical\+Edges, \mbox{\hyperlink{classInterval}{Interval}} x\+\_\+ext, set$<$ \mbox{\hyperlink{classInterval}{Interval}} $>$ L, set$<$ \mbox{\hyperlink{classInterval}{Interval}} $>$ R, set$<$ T $>$ partition, set$<$ \mbox{\hyperlink{classStripe}{Stripe}} $>$ stripes)
\item 
set$<$ \mbox{\hyperlink{classStripe}{Stripe}} $>$ \mbox{\hyperlink{Contour_8cpp_a32faf605cbf6e5494e309228bdf48833}{RECTANGLE\+\_\+\+DAC}} (set$<$ \mbox{\hyperlink{classRectangle}{Rectangle}} $>$ rect)
\item 
void \mbox{\hyperlink{Contour_8cpp_ac5ef613cd955a4557cad6471883cdbb7}{dfs}} (\mbox{\hyperlink{structctree}{ctree}} $\ast$u, vector$<$ \mbox{\hyperlink{structctree}{ctree}} $\ast$ $>$ \&leaves)
\item 
set$<$ \mbox{\hyperlink{classInterval}{Interval}} $>$ \mbox{\hyperlink{Contour_8cpp_aa72f2d0e3929b7498a394ee3b077287f}{free\+Query}} (\mbox{\hyperlink{classInterval}{Interval}} h, \mbox{\hyperlink{classStripe}{Stripe}} s)
\item 
set$<$ \mbox{\hyperlink{classLineSegment}{Line\+Segment}} $>$ \mbox{\hyperlink{Contour_8cpp_ab8689b8ef6ffcf905618e2276c351e92}{contour\+Pieces}} (\mbox{\hyperlink{classEdge}{Edge}} h, set$<$ \mbox{\hyperlink{classStripe}{Stripe}} $>$ S)
\item 
set$<$ \mbox{\hyperlink{classLineSegment}{Line\+Segment}} $>$ \mbox{\hyperlink{Contour_8cpp_aa18b33fcb7be5020f01d3e0ddf294114}{contour}} (set$<$ \mbox{\hyperlink{classRectangle}{Rectangle}} $>$ rect, set$<$ \mbox{\hyperlink{classStripe}{Stripe}} $>$ S)
\item 
void \mbox{\hyperlink{Contour_8cpp_aed30dce9a979127513948783b78f91d1}{dfs2}} (\mbox{\hyperlink{structctree}{ctree}} $\ast$tree)
\item 
set$<$ \mbox{\hyperlink{classInterval}{Interval}} $>$ \mbox{\hyperlink{Contour_8cpp_add28133bb7bb2161351fbaa7d9e70aff}{merge\+Intervals}} (vector$<$ \mbox{\hyperlink{classInterval}{Interval}} $>$ a)
\item 
int \mbox{\hyperlink{Contour_8cpp_a0ddf1224851353fc92bfbff6f499fa97}{main}} (int argc, char $\ast$argv\mbox{[}$\,$\mbox{]})
\end{DoxyCompactItemize}
\doxysubsection*{Variables}
\begin{DoxyCompactItemize}
\item 
\mbox{\Hypertarget{Contour_8cpp_afcbf24b8935fa352fd707595cdc3782b}\label{Contour_8cpp_afcbf24b8935fa352fd707595cdc3782b}} 
const T {\bfseries inf} = 1e6 + 5
\item 
\mbox{\Hypertarget{Contour_8cpp_a3a47f01b0a195cf72c123d48bf44ad27}\label{Contour_8cpp_a3a47f01b0a195cf72c123d48bf44ad27}} 
long long {\bfseries number\+Of\+Rectangles}
\item 
\mbox{\Hypertarget{Contour_8cpp_a677525400a439b4716d08d478a97048b}\label{Contour_8cpp_a677525400a439b4716d08d478a97048b}} 
set$<$ string $>$ {\bfseries edge\+Type} \{\char`\"{}left\char`\"{}, \char`\"{}right\char`\"{}, \char`\"{}bottom\char`\"{}, \char`\"{}top\char`\"{}\}
\item 
\mbox{\Hypertarget{Contour_8cpp_a25421b64f0a5911df79c10b9b94a8279}\label{Contour_8cpp_a25421b64f0a5911df79c10b9b94a8279}} 
set$<$ string $>$ {\bfseries lru} \{\char`\"{}left\char`\"{}, \char`\"{}right\char`\"{}, \char`\"{}undefined\char`\"{}\}
\end{DoxyCompactItemize}


\doxysubsection{Function Documentation}
\mbox{\Hypertarget{Contour_8cpp_a7081468a9dbabf996cd604feaa4c537a}\label{Contour_8cpp_a7081468a9dbabf996cd604feaa4c537a}} 
\index{Contour.cpp@{Contour.cpp}!blacken@{blacken}}
\index{blacken@{blacken}!Contour.cpp@{Contour.cpp}}
\doxysubsubsection{\texorpdfstring{blacken()}{blacken()}}
{\footnotesize\ttfamily set$<$\mbox{\hyperlink{classStripe}{Stripe}}$>$ blacken (\begin{DoxyParamCaption}\item[{set$<$ \mbox{\hyperlink{classStripe}{Stripe}} $>$}]{S,  }\item[{set$<$ \mbox{\hyperlink{classInterval}{Interval}} $>$}]{J }\end{DoxyParamCaption})}

Implements the blacken function as described in the algorithm by taking the stripes for which edges in it don\textquotesingle{}t have a partner in the opposite stripe and setting its X\+\_\+\+Union to empty 
\begin{DoxyParams}{Parameters}
{\em Set} & of Stripes S \\
\hline
{\em Set} & of Intervals J \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
Set of Stripes ans 
\end{DoxyReturn}
\mbox{\Hypertarget{Contour_8cpp_a350212d4e224cd81a4c689df94eb395d}\label{Contour_8cpp_a350212d4e224cd81a4c689df94eb395d}} 
\index{Contour.cpp@{Contour.cpp}!calculateMeasure@{calculateMeasure}}
\index{calculateMeasure@{calculateMeasure}!Contour.cpp@{Contour.cpp}}
\doxysubsubsection{\texorpdfstring{calculateMeasure()}{calculateMeasure()}}
{\footnotesize\ttfamily T calculate\+Measure (\begin{DoxyParamCaption}\item[{set$<$ \mbox{\hyperlink{classStripe}{Stripe}} $>$}]{S }\end{DoxyParamCaption})}

Computes the final area of the rectangles 
\begin{DoxyParams}{Parameters}
{\em Set} & of Stripes S \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
Integer ans 
\end{DoxyReturn}
\mbox{\Hypertarget{Contour_8cpp_ac9d9cfa33b129ebfd7dae403ed646180}\label{Contour_8cpp_ac9d9cfa33b129ebfd7dae403ed646180}} 
\index{Contour.cpp@{Contour.cpp}!computeStripes@{computeStripes}}
\index{computeStripes@{computeStripes}!Contour.cpp@{Contour.cpp}}
\doxysubsubsection{\texorpdfstring{computeStripes()}{computeStripes()}}
{\footnotesize\ttfamily struct \mbox{\hyperlink{structReturnSet}{Return\+Set}} compute\+Stripes (\begin{DoxyParamCaption}\item[{vector$<$ \mbox{\hyperlink{classEdge}{Edge}} $>$}]{vertical\+Edges,  }\item[{\mbox{\hyperlink{classInterval}{Interval}}}]{x\+\_\+ext,  }\item[{set$<$ \mbox{\hyperlink{classInterval}{Interval}} $>$}]{L,  }\item[{set$<$ \mbox{\hyperlink{classInterval}{Interval}} $>$}]{R,  }\item[{set$<$ T $>$}]{partition,  }\item[{set$<$ \mbox{\hyperlink{classStripe}{Stripe}} $>$}]{stripes }\end{DoxyParamCaption})}

STRIPES function according to the algorithm in which there are Divide, Conquer, and Merge steps 
\begin{DoxyParams}{Parameters}
{\em Vector} & of Edges vertical\+Edges \\
\hline
{\em \mbox{\hyperlink{classInterval}{Interval}}} & x\+\_\+ext \\
\hline
{\em Set} & of Intervals L \\
\hline
{\em Set} & of Intervals R \\
\hline
{\em Set} & of Integers partition \\
\hline
{\em Set} & of Stripes stripes \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
\mbox{\hyperlink{structReturnSet}{Return\+Set}} object 
\end{DoxyReturn}
\mbox{\Hypertarget{Contour_8cpp_aab15ea286786048f44dff97f975a4db8}\label{Contour_8cpp_aab15ea286786048f44dff97f975a4db8}} 
\index{Contour.cpp@{Contour.cpp}!concat@{concat}}
\index{concat@{concat}!Contour.cpp@{Contour.cpp}}
\doxysubsubsection{\texorpdfstring{concat()}{concat()}}
{\footnotesize\ttfamily set$<$\mbox{\hyperlink{classStripe}{Stripe}}$>$ concat (\begin{DoxyParamCaption}\item[{set$<$ \mbox{\hyperlink{classStripe}{Stripe}} $>$}]{S1,  }\item[{set$<$ \mbox{\hyperlink{classStripe}{Stripe}} $>$}]{S2,  }\item[{set$<$ T $>$}]{P,  }\item[{\mbox{\hyperlink{classInterval}{Interval}}}]{x\+\_\+int }\end{DoxyParamCaption})}

Implements the concat function as described in the algorithm by concatenating the stripes in both subproblems 
\begin{DoxyParams}{Parameters}
{\em S1} & \\
\hline
{\em S2} & \\
\hline
{\em P} & \\
\hline
{\em x\+\_\+int} & \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
ans 
\end{DoxyReturn}
\mbox{\Hypertarget{Contour_8cpp_aa18b33fcb7be5020f01d3e0ddf294114}\label{Contour_8cpp_aa18b33fcb7be5020f01d3e0ddf294114}} 
\index{Contour.cpp@{Contour.cpp}!contour@{contour}}
\index{contour@{contour}!Contour.cpp@{Contour.cpp}}
\doxysubsubsection{\texorpdfstring{contour()}{contour()}}
{\footnotesize\ttfamily set$<$\mbox{\hyperlink{classLineSegment}{Line\+Segment}}$>$ contour (\begin{DoxyParamCaption}\item[{set$<$ \mbox{\hyperlink{classRectangle}{Rectangle}} $>$}]{rect,  }\item[{set$<$ \mbox{\hyperlink{classStripe}{Stripe}} $>$}]{S }\end{DoxyParamCaption})}

Divides the rectangles into horizontal edges and feeds them to the other functions 
\begin{DoxyParams}{Parameters}
{\em Set} & of Rectangles rect \\
\hline
{\em Set} & of Stripes S \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
set of Line Segments ans 
\end{DoxyReturn}
\mbox{\Hypertarget{Contour_8cpp_ab8689b8ef6ffcf905618e2276c351e92}\label{Contour_8cpp_ab8689b8ef6ffcf905618e2276c351e92}} 
\index{Contour.cpp@{Contour.cpp}!contourPieces@{contourPieces}}
\index{contourPieces@{contourPieces}!Contour.cpp@{Contour.cpp}}
\doxysubsubsection{\texorpdfstring{contourPieces()}{contourPieces()}}
{\footnotesize\ttfamily set$<$\mbox{\hyperlink{classLineSegment}{Line\+Segment}}$>$ contour\+Pieces (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{classEdge}{Edge}}}]{h,  }\item[{set$<$ \mbox{\hyperlink{classStripe}{Stripe}} $>$}]{S }\end{DoxyParamCaption})}

Given an edge, matches the corresponding \mbox{\hyperlink{classStripe}{Stripe}} to pass to free\+Query 
\begin{DoxyParams}{Parameters}
{\em \mbox{\hyperlink{classEdge}{Edge}}} & h \\
\hline
{\em Set} & of Stripes S \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
Set of Line Segments ans 
\end{DoxyReturn}
\mbox{\Hypertarget{Contour_8cpp_ab9e88b9d504afff4dd5d036d42def5f6}\label{Contour_8cpp_ab9e88b9d504afff4dd5d036d42def5f6}} 
\index{Contour.cpp@{Contour.cpp}!copyFunction@{copyFunction}}
\index{copyFunction@{copyFunction}!Contour.cpp@{Contour.cpp}}
\doxysubsubsection{\texorpdfstring{copyFunction()}{copyFunction()}}
{\footnotesize\ttfamily set$<$\mbox{\hyperlink{classStripe}{Stripe}}$>$ copy\+Function (\begin{DoxyParamCaption}\item[{set$<$ \mbox{\hyperlink{classStripe}{Stripe}} $>$}]{S,  }\item[{set$<$ T $>$}]{P,  }\item[{set$<$ T $>$}]{P1,  }\item[{\mbox{\hyperlink{classInterval}{Interval}}}]{x\+\_\+int }\end{DoxyParamCaption})}

Implements the copy function as described in the algorithm by dividing the existing stripes on both sides and setting the X\+\_\+\+Union accordingly 
\begin{DoxyParams}{Parameters}
{\em Set} & of Stripes S \\
\hline
{\em Set} & of integers P \\
\hline
{\em Set} & of integers P1 \\
\hline
{\em \mbox{\hyperlink{classInterval}{Interval}}} & x\+\_\+int \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
Set of Stripes ans 
\end{DoxyReturn}
\mbox{\Hypertarget{Contour_8cpp_ac5ef613cd955a4557cad6471883cdbb7}\label{Contour_8cpp_ac5ef613cd955a4557cad6471883cdbb7}} 
\index{Contour.cpp@{Contour.cpp}!dfs@{dfs}}
\index{dfs@{dfs}!Contour.cpp@{Contour.cpp}}
\doxysubsubsection{\texorpdfstring{dfs()}{dfs()}}
{\footnotesize\ttfamily void dfs (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{structctree}{ctree}} $\ast$}]{u,  }\item[{vector$<$ \mbox{\hyperlink{structctree}{ctree}} $\ast$ $>$ \&}]{leaves }\end{DoxyParamCaption})}

Finds the leaves of a ctree and pushes it into an array 
\begin{DoxyParams}{Parameters}
{\em pointer} & to ctree u \\
\hline
{\em Vector} & of pointers to a ctree leaves (passed by reference) \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{Contour_8cpp_aed30dce9a979127513948783b78f91d1}\label{Contour_8cpp_aed30dce9a979127513948783b78f91d1}} 
\index{Contour.cpp@{Contour.cpp}!dfs2@{dfs2}}
\index{dfs2@{dfs2}!Contour.cpp@{Contour.cpp}}
\doxysubsubsection{\texorpdfstring{dfs2()}{dfs2()}}
{\footnotesize\ttfamily void dfs2 (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{structctree}{ctree}} $\ast$}]{tree }\end{DoxyParamCaption})}

Utility function to help with debugging 
\begin{DoxyParams}{Parameters}
{\em ctree} & $\ast$tree \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{Contour_8cpp_aa72f2d0e3929b7498a394ee3b077287f}\label{Contour_8cpp_aa72f2d0e3929b7498a394ee3b077287f}} 
\index{Contour.cpp@{Contour.cpp}!freeQuery@{freeQuery}}
\index{freeQuery@{freeQuery}!Contour.cpp@{Contour.cpp}}
\doxysubsubsection{\texorpdfstring{freeQuery()}{freeQuery()}}
{\footnotesize\ttfamily set$<$\mbox{\hyperlink{classInterval}{Interval}}$>$ free\+Query (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{classInterval}{Interval}}}]{h,  }\item[{\mbox{\hyperlink{classStripe}{Stripe}}}]{s }\end{DoxyParamCaption})}

Finds the free part of an intersection intervals of an interval with the X\+\_\+\+Union of a stripe 
\begin{DoxyParams}{Parameters}
{\em \mbox{\hyperlink{classInterval}{Interval}}} & h \\
\hline
{\em \mbox{\hyperlink{classStripe}{Stripe}}} & s \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
Set of Intervals ans 
\end{DoxyReturn}
\mbox{\Hypertarget{Contour_8cpp_a694ccc98dc701f61bf0b89164fbf7ccb}\label{Contour_8cpp_a694ccc98dc701f61bf0b89164fbf7ccb}} 
\index{Contour.cpp@{Contour.cpp}!intervalIntersection@{intervalIntersection}}
\index{intervalIntersection@{intervalIntersection}!Contour.cpp@{Contour.cpp}}
\doxysubsubsection{\texorpdfstring{intervalIntersection()}{intervalIntersection()}}
{\footnotesize\ttfamily set$<$\mbox{\hyperlink{classInterval}{Interval}}$>$ interval\+Intersection (\begin{DoxyParamCaption}\item[{set$<$ \mbox{\hyperlink{classInterval}{Interval}} $>$}]{L1,  }\item[{set$<$ \mbox{\hyperlink{classInterval}{Interval}} $>$}]{R2 }\end{DoxyParamCaption})}

Finds the intersection of sets of intervals to be used by the compute\+Stripes function 
\begin{DoxyParams}{Parameters}
{\em Set} & of intervals L1 \\
\hline
{\em Set} & of intervals R2 \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
Set of intervals ans 
\end{DoxyReturn}
\mbox{\Hypertarget{Contour_8cpp_a0ddf1224851353fc92bfbff6f499fa97}\label{Contour_8cpp_a0ddf1224851353fc92bfbff6f499fa97}} 
\index{Contour.cpp@{Contour.cpp}!main@{main}}
\index{main@{main}!Contour.cpp@{Contour.cpp}}
\doxysubsubsection{\texorpdfstring{main()}{main()}}
{\footnotesize\ttfamily int main (\begin{DoxyParamCaption}\item[{int}]{argc,  }\item[{char $\ast$}]{argv\mbox{[}$\,$\mbox{]} }\end{DoxyParamCaption})}

This is the main function entry point of the program \mbox{\Hypertarget{Contour_8cpp_add28133bb7bb2161351fbaa7d9e70aff}\label{Contour_8cpp_add28133bb7bb2161351fbaa7d9e70aff}} 
\index{Contour.cpp@{Contour.cpp}!mergeIntervals@{mergeIntervals}}
\index{mergeIntervals@{mergeIntervals}!Contour.cpp@{Contour.cpp}}
\doxysubsubsection{\texorpdfstring{mergeIntervals()}{mergeIntervals()}}
{\footnotesize\ttfamily set$<$\mbox{\hyperlink{classInterval}{Interval}}$>$ merge\+Intervals (\begin{DoxyParamCaption}\item[{vector$<$ \mbox{\hyperlink{classInterval}{Interval}} $>$}]{a }\end{DoxyParamCaption})}

Utility function to find the union of a set of intervals 
\begin{DoxyParams}{Parameters}
{\em vector} & of intervals a \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
set of intervals ans 
\end{DoxyReturn}
\mbox{\Hypertarget{Contour_8cpp_a32faf605cbf6e5494e309228bdf48833}\label{Contour_8cpp_a32faf605cbf6e5494e309228bdf48833}} 
\index{Contour.cpp@{Contour.cpp}!RECTANGLE\_DAC@{RECTANGLE\_DAC}}
\index{RECTANGLE\_DAC@{RECTANGLE\_DAC}!Contour.cpp@{Contour.cpp}}
\doxysubsubsection{\texorpdfstring{RECTANGLE\_DAC()}{RECTANGLE\_DAC()}}
{\footnotesize\ttfamily set$<$\mbox{\hyperlink{classStripe}{Stripe}}$>$ RECTANGLE\+\_\+\+DAC (\begin{DoxyParamCaption}\item[{set$<$ \mbox{\hyperlink{classRectangle}{Rectangle}} $>$}]{rect }\end{DoxyParamCaption})}

Provides a basic setup for divide-\/and-\/conquer algorithm compute\+Stripes(\+STRIPES) 
\begin{DoxyParams}{Parameters}
{\em Set} & of Rectangles rect \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
Set of Stripes return\+Value.\+stripes 
\end{DoxyReturn}
